Terraform Installation 
	1. Download the Terraform Birany. (terraform.exe)
	2. Copy the binary to any one of the path attached in PATH environment variable.
	3. Check the installation with terraform --version
	4. Create a IAM user with programatic access only. 
	5. Create below environment variales to configure the provider access.
		 export AWS_ACCESS_KEY_ID="accesskey"
		 export AWS_SECRET_ACCESS_KEY="secretkey"
		 export AWS_DEFAULT_REGION="us-west-2"
	
Terraform
	- Terraform is an open source tool by HashiCorp which allows us to write infrastructure as Code (IaC) to automate provisioning of cloud infrastructure like AWS, GCP etc.
	- Terraform is internally written GOLANG and source code is available in github.
   
	Advantages of using Terraform
		- Reusable: write the code once and we can use the same code multiple times with 	  
		            different accounts.
		- Maintainable and Auditable: we can version control the code like in git.
        - Sharable: Terraform provides some options by which a team can work on same code easily.
		- Repeatable: we can run the same code again and again to get the same results. 	
		- Testable: we have dry run option called plan by which we can predict/test the configuration before actually applying the code to infrastructure.
		
Terraform Code/Configuration/scripts
	- It is written in HCL - HashiCorp Language and the filetype is .tf 

Provider
	- It is a mandatory block in our terraform project and can be used only once in a project.
	- Providers like aws which is used to work with aws infrastructure resources.
		
			provider "aws" {
				region = "us-east-1"
			}
	
Terraform Registry 
	- It is a reporitory of modules written by terraform community based on the providers 	
	url: registry.terraform.io
	
How to avoid terraform from auto update	
	terraform {
		required_version = ">=0.12"
	}
How to avoid provider plugin from auto update	
	required_providers {
    aws = {
      version = "= 3.55.0"
      source = "hashicorp/aws"
    }

	Combined to gether in terraform.tf file 
		terraform {
			required_version = ">=0.12"
			
			required_providers {
			aws = {
			  version = "= 3.55.0"
			  source = "hashicorp/aws"
			}
		  }	
		}
	
Execution process 
	1) terraform init 
		- used to initialize the working directory containing terraform code as terraform project. 
        - terraform will automatically downloads the required files and binaries to execute the code based on the provider configuration.		
		
		init operation:
			1) Initialization of the backend 
			2) Initialization of Provider plugins 
			3) Initialization of child modules

	2) Terraform plan 
		- Is used to create an execution plan (as dry run prediction) for what will be   configured on the actual cloud infrastructure. 
		- Terraform performs auto refresh of plan on every run unless it is explicitly disabled. 
        - Terraform will automatically scans all the .tf files in the current directory.
		- Plan will always compare the json data from state file with the actual cloud resources.
		To save the plan in a separete file and if I want to use this plan to apply 
			terraform plan -out my-plan.out
	
	3) Terraform apply 
		- Is used to apply the planned changes to actual cloud infrastructure.
		- We can run aplly n number times the result will be same as terraform internally maintains a state where it will always compare the desired state with current state in the cloud.
		
		Apply the current configure in a directory 
			terraform apply 
			
		Apply with auto approve 
			terraform apply --auto-approve
		
		Apply with saved plan 
			terraform apply my-plan.out
			
	4) 	Terraform Destroy
		- Is used to delete the resources that are managed by terraform scritps.
		- we can also create a destroy plan - terraform plan destroy 
		- If we want to delete particular resource out of n number of resources.
			terraform destroy --target <resource_type>.<resource_name>
				
				ex. terraform destroy --target aws_instance.my_instance
				
	5) Terraform validate 
		- Used to check the syntax of the all terraform scripts in the project.
			
Terraform Remote state (Backend)
	If we are working in a team saving state local doesnt help to sync the configuration. Instead of having a local JSON state file named terraform.tfstate, the state file is stored in a remote place such as AWS S3, Consul, Terraform cloud etc. and all the team members will refer to this remote state called Backend.
	
Variable and Outputs 
		
	Input variables
		- Input variables serves as parameters for our terraform scripts.
		- Main advantage is module can be custamized without altering the terraform source code.
		- To suppres the values in the output use sensitive = true	
		
			variable "instance_type" {
				type = string
				default = "t2.micro"
			}
			
			variable "instance_type" {
				type = number
				default = "t2.micro"
			}
			
			variable "docker_ports" {
				type = list(object({
					internal = number
					external = number
					protocol = string
				}))
				default = [{
					internal = 8080
					external = 8081
					protocol = tcp
				}]
			}
			
	Output variables
		- output variables are like return values of a terraform module.
		- A child module can use output variables to feed the data to other modules such as parent module and root module.
		- root module can use output variables to print the values to CLI after running the resources.
		- To suppres the values in the output use sensitive = true 
		
	Local variables 
		- Instead of having same value multiple time in a same terraform code we can put that value in local variable and we can use it, so that If we want to change the value we can change it once in the variable.
		
			locals {
				<var_name> = "<value>"
				<var_name1> = "<value>"
				<var_name2> = "<value>"
				<var_name3> = "<value>"
				<var_name4> = "<value>"
			}	
	
				
			
			  